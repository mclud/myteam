#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || '5000';

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,8080, () => {
  console.log('listening on port :', port);
});

const io = require("socket.io")(
  server, 
  { 
  cors: {    
    origin: "http://localhost:3000",     //comment this line for prod
    methods: ["GET", "POST"],
    allowedHeaders: ["ioteam"],
  }}
  );
  io.on("connection", (socket) => {
    socket.on('userAddedMessage', (res) => {
      socket.broadcast.emit('refreshList', res);
    });
    socket.on('toctoc', (res) => {
      socket.local.emit('WHOAREYOU');
    });
    socket.on('IAM', (user) => {
      socket.local.emit('addUserOn', user);
    });
  });
 io.on("connect_error", (err) => {
  console.log(`connect_error due to ${err.message}`);

 io.on('newMsgFromChat', (socket) => {
   socket.emit('newMsgFromSrv', { data : "test"});
 })
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
